glob int regBegin
glob int regEnd
glob int voteBegin
glob int voteEnd

glob token vote_token

glob mut int candidate_a_votes
glob mut int candidate_b_votes

@lstate ->not_voted
Create create(int regBegin, int regEnd, int voteBegin, int voteEnd, token vote_token) {
	glob.regBegin = regBegin
	glob.regEnd = regEnd
	glob.voteBegin = voteBegin
	glob.voteEnd = voteEnd
	glob.vote_token = vote_token
}

@lstate ->not_voted
@round (glob.regBegin, glob.regEnd)
OptIn register() {}

@lstate not_voted->voted
@round (glob.voteBegin, glob.voteEnd)
@pay 1 glob.vote_token : caller -> escrow
@assert candidate == "a" || candidate == "b"
vote(string candidate) {
	if (candidate == "a") {
		glob.candidate_a_votes += 1
	}
	else if (candidate == "b") {
		glob.candidate_b_votes += 1
	}
}

@round (glob.voteEnd, )
@from creator
Delete delete() {}