glob token t0
glob token t1
glob token minted_t
glob mut int r0
glob mut int r1
glob mut int minted_supply
loc mut int t0_reserved
loc mut int t1_reserved
loc mut int minted_reserved

@pay $v0 of t0 : caller -> escrow
@pay $v1 of t1 : caller -> escrow
@newtok $minted_t -> escrow  
@pay $minted_v of minted_t : escrow -> caller
@assert t0 != t1
Create amm(token t0, token t1) {
    glob.t0 = t0
    glob.t1 = t1
    glob.minted_t = minted_t
    glob.r0 = v0
    glob.r1 = v1
    glob.minted_supply = minted_v
}

OptIn optin() {
    loc.t0_reserved = 0
    loc.t1_reserved = 0
    loc.minted_reserved = 0
}

@pay $v0_highb of glob.t0 : * -> escrow
@pay $v1_highb of glob.t1 : * -> escrow
@assert v1_lowb <= v0_highb * glob.r1 / glob.r0 
@assert v0_highb * glob.r1 / glob.r0 <= v1_highb 
dep(int v0_lowb, int v1_lowb) {
    loc.t0_reserved = v0_highb - (v0_highb * glob.r1 / glob.r0)
    glob.minted_supply += v1_highb / glob.r1 * glob.minted_supply
    loc.minted_reserved += v1_highb / glob.r1 * glob.minted_supply
}

@pay $v0_highb of glob.t0 : * -> escrow
@pay $v1_highb of glob.t1 : * -> escrow
@assert v0_lowb <= v1_highb * glob.r0 / glob.r1 
@assert v1_highb * glob.r0 / glob.r1 <= v0_highb 
dep(int v0_lowb, int v1_lowb) {
    loc.t1_reserved = v1_highb - (v1_highb * glob.r0 / glob.r1)
    glob.minted_supply += v0_highb / glob.r0 * glob.minted_supply
    loc.minted_reserved += v0_highb / glob.r0 * glob.minted_supply
}

@pay $v0 of glob.t0 : * -> escrow
@assert (glob.r1 * v0) / (glob.r0 + v0) >= lowb && lowb > 0
swap(int lowb) {
	loc.t1_reserved += (glob.r1 * v0) / (glob.r0 + v0)
	glob.r1 -= (glob.r1 * v0) / (glob.r0 + v0)
	glob.r0 += v0
}

@pay $v1 of glob.t1 : * -> escrow
@assert (glob.r0 * v1) / (glob.r1 + v1) >= lowb && lowb > 0
swap(int lowb) {
	loc.t0_reserved += (glob.r0 * v1) / (glob.r1 + v1)
	glob.r0 -= (glob.r0 * v1) / (glob.r1 + v1)
	glob.r1 += v1
}

@pay $v of glob.minted_t : * -> escrow
@assert v * glob.r0 / glob.minted_supply >= v0_lowb && v0_lowb > 0
@assert v * glob.r1 / glob.minted_supply >= v1_lowb && v1_lowb > 0
redeem(int v0_lowb, int v1_lowb) {
    glob.r0 -= v * glob.r0 / glob.minted_supply
    glob.r1 -= v * glob.r1 / glob.minted_supply
    loc.t0_reserved += v * glob.r0 / glob.minted_supply
    loc.t1_reserved += v * glob.r1 / glob.minted_supply
    glob.minted_supply -= v
}

@pay loc.minted_reserved of glob.minted_t : escrow -> *   
get_excess() {
    loc.minted_reserved = 0
}

@pay loc.t0_reserved of glob.t0 : escrow -> *
get_excess() {
    loc.t0_reserved = 0
}

@pay loc.t1_reserved of glob.t1 : escrow -> *
get_excess() {
    loc.t1_reserved = 0
}
