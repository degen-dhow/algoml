glob int turns_to_play
glob int turn_started_at
glob address player1
glob address player2
glob int score1
glob int score2
glob string hand_commit1
glob string hand_commit2
glob int hand1
glob int hand2
glob string guess_commit1
glob string guess_commit2
glob int guess1
glob int guess2

/******************************
 Contract creation
 ******************************/

@gstate -> joined0
@round $r
@assert turns_to_play > 0
Create morra(int turns_to_play) {
    glob.turns_to_play = turns_to_play
    glob.turn_started_at = r
    glob.score1 = 0
    glob.score2 = 0
}

/******************************
 Joining the game
 ******************************/

@gstate joined0 -> joined1
@round (glob.turn_started_at,glob.turn_started_at+100)$r
@pay 1 of ALGO : caller -> escrow
join() {
    glob.player1 = caller
    glob.turn_started_at = r
}

@gstate joined1 -> turn1
@round (glob.turn_started_at,glob.turn_started_at+100)$r
@pay 1 of ALGO : caller -> escrow
join() {
    glob.player2 = caller
    glob.turn_started_at = r
}

@gstate joined1 -> end
@round (glob.turn_started_at+200,)
@close ALGO : escrow -> glob.player1
redeem() {}


/******************************
 Playing a turn
 ******************************/

@gstate turn1 -> turn2
@round (glob.turn_started_at,glob.turn_started_at+100)$r
@assert glob.turns_to_play > 0
hand(string hand_commit, string guess_commit) {
    glob.turns_to_play = glob.turns_to_play - 1
    glob.hand_commit1 = hand_commit
    glob.guess_commit1 = guess_commit
    glob.turn_started_at = r
}

@gstate turn2 -> reveal1
@round (glob.turn_started_at,glob.turn_started_at+100)$r
@assert glob.hand_commit1 != hand_commit
@assert glob.guess_commit1 != guess_commit
hand(string hand_commit, string guess_commit) {
    glob.hand_commit2 = hand_commit
    glob.guess_commit2 = guess_commit
    glob.turn_started_at = r
}


/******************************
 Opening the commitments
 ******************************/

// player1 must reveal the hand first
@gstate reveal1 -> reveal2
@round (glob.turn_started_at,glob.turn_started_at+100)$r
@assert 0 <= len(hand) - 32 && len(hand) - 32 <= 5
@assert sha256(hand) == glob.hand_commit1
@assert sha256(guess) == glob.guess_commit1
reveal(string hand, string guess) {
    glob.hand1 = len(hand) - 32
    glob.guess1 = len(guess) - 32
    glob.turn_started_at = r
}

// player2 must reveal the hand after player1
@gstate reveal2 -> winturn
@round (glob.turn_started_at,glob.turn_started_at+100)$r
@assert 0 <= len(hand) - 32 && len(hand) - 32 <= 5
@assert sha256(hand) == glob.hand_commit2
@assert sha256(guess) == glob.guess_commit2
reveal(string hand, string guess) {
    glob.hand2 = len(hand) - 32
    glob.guess2 = len(guess) - 32
    glob.turn_started_at = r
}


/******************************
 Scoring the turn
 ******************************/

// player1 does not commit in time
@gstate turn1 -> turn1
@round (glob.turn_started_at+100,)$r
newturn() {
    glob.score2 = glob.score2 + 1
    glob.turn_started_at = r
}

// player2 does not commit in time
@gstate turn2 -> turn1
@round (glob.turn_started_at+100,)$r
newturn() {
    glob.score1 = glob.score1 + 1
    glob.turn_started_at = r
}

// player1 does not reveal in time
@gstate reveal1 -> turn1
@round (glob.turn_started_at+100,)$r
newturn() {
    glob.score1 = glob.score1 + 1
    glob.turn_started_at = r
}

// if player2 has not revealed, player1 can redeem the pot
@gstate reveal2 -> turn1
@round (glob.turn_started_at+100,)$r
newturn() {
    glob.score1 = glob.score1 + 1
    glob.turn_started_at = r
}

// player1 wins the turn
@gstate winturn -> turn1
@round (glob.turn_started_at,glob.turn_started_at+100)$r
@assert glob.guess1 == glob.hand1 + glob.hand2
newturn() {
    glob.turn_started_at = r
    glob.score1 = glob.score1 + 1
}

// player2 wins the turn
@gstate winturn -> turn1
@round (glob.turn_started_at,glob.turn_started_at+100)$r
@assert glob.guess2 == glob.hand1 + glob.hand2
newturn() {
    glob.score2 = glob.score2 + 1
    glob.turn_started_at = r
}

// no one wins the turn, or no one claims the point
@gstate winturn -> turn1
@round (glob.turn_started_at+100)$r
newturn() {
    glob.turn_started_at = r
}

/******************************
 Closing the game
 ******************************/

@gstate turn1 -> end
@assert glob.turns_to_play == 0
@close ALGO : escrow -> glob.player1 
@assert glob.score1 > glob.score2
win() {}

@gstate turn1 -> end
@assert glob.turns_to_play == 0
@close ALGO : escrow -> glob.player2
@assert glob.score2 > glob.score1
win() {}

@gstate turn1 -> end
@assert glob.turns_to_play == 0
@assert glob.score1 == glob.score2
@pay 1 of ALGO : escrow -> glob.player1 
@pay 1 of ALGO : escrow -> glob.player2
win() {}

/******************************
 Deleting the contract
 ******************************/

// delete a termibated contract
@gstate end -> 
@from creator
Delete delete() {}
